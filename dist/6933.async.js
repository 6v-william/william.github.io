"use strict";(self.webpackChunkpc_template=self.webpackChunkpc_template||[]).push([[6933],{76933:function(D,v,s){s.d(v,{offchainLookup:function(){return T},offchainLookupSignature:function(){return b}});var O=s(66571),m=s(16693),p=s(93959),y=s(46353);class k extends p.G{constructor({callbackSelector:o,cause:t,data:c,extraData:i,sender:u,urls:a}){var r;super(t.shortMessage||"An error occurred while fetching for an offchain result.",{cause:t,metaMessages:[...t.metaMessages||[],(r=t.metaMessages)!=null&&r.length?"":[],"Offchain Gateway Call:",a&&["  Gateway URL(s):",...a.map(d=>`    ${(0,y.G)(d)}`)],`  Sender: ${u}`,`  Data: ${c}`,`  Callback selector: ${o}`,`  Extra data: ${i}`].flat(),name:"OffchainLookupError"})}}class E extends p.G{constructor({result:o,url:t}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${(0,y.G)(t)}`,`Response: ${(0,m.P)(o)}`],name:"OffchainLookupResponseMalformedError"})}}class G extends p.G{constructor({sender:o,to:t}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${t}`,`OffchainLookup sender address: ${o}`],name:"OffchainLookupSenderMismatchError"})}}var g=s(79263),R=s(6886),x=s(84187),M=s(31102),S=s(50259),$=s(19744),w=s(90899);const b="0x556f1830",C={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function T(f,{blockNumber:o,blockTag:t,data:c,to:i}){const{args:u}=(0,R.p)({data:c,abi:[C]}),[a,r,d,l,n]=u,{ccipRead:e}=f,L=e&&typeof(e==null?void 0:e.request)=="function"?e.request:P;try{if(!(0,M.E)(i,a))throw new G({sender:a,to:i});const h=r.includes(w.M)?await(0,w.w)({data:d,ccipRequest:L}):await L({data:d,sender:a,urls:r}),{data:A}=await(0,O.R)(f,{blockNumber:o,blockTag:t,data:(0,S.zo)([l,(0,x.E)([{type:"bytes"},{type:"bytes"}],[h,n])]),to:i});return A}catch(h){throw new k({callbackSelector:l,cause:h,data:c,extraData:n,sender:a,urls:r})}}async function P({data:f,sender:o,urls:t}){var i;let c=new Error("An unknown error occurred.");for(let u=0;u<t.length;u++){const a=t[u],r=a.includes("{data}")?"GET":"POST",d=r==="POST"?{data:f,sender:o}:void 0,l=r==="POST"?{"Content-Type":"application/json"}:{};try{const n=await fetch(a.replace("{sender}",o.toLowerCase()).replace("{data}",f),{body:JSON.stringify(d),headers:l,method:r});let e;if((i=n.headers.get("Content-Type"))!=null&&i.startsWith("application/json")?e=(await n.json()).data:e=await n.text(),!n.ok){c=new g.Gg({body:d,details:e!=null&&e.error?(0,m.P)(e.error):n.statusText,headers:n.headers,status:n.status,url:a});continue}if(!(0,$.v)(e)){c=new E({result:e,url:a});continue}return e}catch(n){c=new g.Gg({body:d,details:n.message,url:a})}}throw c}}}]);
